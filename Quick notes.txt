//Main.java
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
 
public class Main extends JFrame implements ActionListener
{
    CompressedColor BaseColor;
    JMenuBar bar;
    JMenu file;
    JMenu edit;
    JMenuItem save;
    JMenuItem exportdata;
    JMenuItem exportfunction;
    JMenuItem bgcolor;
    ImagePane canvas;
    ShadeSelectPane shadeselector;

    Main(){
        BaseColor = new CompressedColor(new Color(0,0,0));
        BaseColor.updateShades();
        this.setTitle("Image Editor");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(600,600);
        this.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
         //natural height, maximum width
         c.fill = GridBagConstraints.BOTH;
        
        //MenuBar
        bar = new JMenuBar();
        this.setJMenuBar(bar);
        
        //Menus
        file = new JMenu("File");
        bar.add(file);
        edit = new JMenu("Edit");
        bar.add(edit);
        //FileItems
        save = new JMenuItem("Save");
        save.addActionListener(this);
        file.add(save);
        exportdata = new JMenuItem("Export image data to file");
        exportdata.addActionListener(this);
        file.add(exportdata);
        exportfunction = new JMenuItem("Export function");
        exportfunction.addActionListener(this);
        file.add(exportfunction);
        //EditItems
        bgcolor = new JMenuItem("Set basecolor");
        bgcolor.addActionListener(this);
        edit.add(bgcolor);
        //Drawing Surface
        canvas = new ImagePane();
        canvas.setBorder(BorderFactory.createLineBorder(Color.black));
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0.98;
        c.weighty = 0.5;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy = 0;
        this.add(canvas, c);
        //ShadeSelector
        shadeselector = new ShadeSelectPane(BaseColor);
        shadeselector.setBorder(BorderFactory.createLineBorder(Color.red));
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0.02;
        c.weighty = 0.5;
        c.gridwidth = 1;
        c.gridx = 4;
        c.gridy = 0;
        this.add(shadeselector, c);

    }
    // main-Methode
    public static void main(String[] args)
    {                                                
        Main frame = new Main();
        frame.setVisible(true);   
        
    }
    public void actionPerformed (ActionEvent ae){
        
        if(ae.getSource() == this.bgcolor){
            BaseColor = new CompressedColor(JColorChooser.showDialog(null, "Farbauswahl", null));
            BaseColor.updateShades();
            System.out.println(Integer.toHexString(BaseColor.rgb565));
            shadeselector.repaint();
        }
        else if(ae.getSource() == this.save){
            System.out.println("Save was pressed!");
        }
        else if(ae.getSource() == this.exportdata){
            System.out.println("Export Data was pressed!");
        }
        else if(ae.getSource() == this.exportfunction){
            System.out.println("Export Function was pressed");
        }
    }
}
class ImagePane extends JPanel {

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawString("BLAH", 20, 20);
        g.drawRect(200, 200, 200, 200);
    }
}
class ShadeSelectPane extends JPanel {
    CompressedColor BaseColor;
    ShadeSelectPane(CompressedColor baseColor){
        super();
        BaseColor = baseColor;
    }
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int i = 0; i < 8; i++) {
            g.setColor(BaseColor.shades[i].color);
           g.fillRect(0, i*(this.getHeight()/8), this.getWidth(), i*(this.getHeight()/8)+(this.getHeight()/8)); 
        }

        
    }
}
//CompressedColor.java

import java.awt.Color;

public class CompressedColor {
    Color color;
    short rgb565;
    CompressedColor[] shades;
    void updateShades(){
        for (int i = 0; i < shades.length; i++) {
            shades[i]  = new CompressedColor(new Color((color.getRed()-(i<<3))&0xFF, (color.getGreen()-(i<<3))&0xff, (color.getBlue()-(i<<3))&0xff));
        }
    }
    void setColor(Color clr){
        color = clr;
        rgb565=(short)((((clr.getRed() & 0b11111000) << 8) | ((clr.getGreen() & 0b11111100) << 3) | (clr.getBlue() >> 3))&0xFFFF);
        
    }
    CompressedColor(short clr){
        shades = new CompressedColor[8];
        rgb565 = clr;
        color= new Color((clr>>8)&0xF8, (clr>>3)&0xFC, (clr<<3)&0xF8);
    }
    CompressedColor(Color clr){
        shades = new CompressedColor[8];
        color = clr;
        rgb565=(short)((((clr.getRed() & 0b11111000) << 8) | ((clr.getGreen() & 0b11111100) << 3) | (clr.getBlue() >> 3))&0xFFFF);
    }
}
